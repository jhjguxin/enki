h1. Enki

A Ruby on Rails blogging app for the fashionable developer.

Preferences are for the masses. Any real coder knows the easiest and best way to customize something is by *hacking code*. Because you want your blog to be you, not bog standard install #4958 with 20 posts per page instead of 15. For this you need a *clean, simple, easy to understand code base* that stays out of your way. No liquid drops and templates hindering your path, no ugly PHP(Hypertext Preprocessor) stylings burning your eyeballs.

h2. Quick Start

<pre><code>  git clone git://github.com/jhjguxin/enki.git
  cd enki
  git checkout -b myblog # Create a new work branch
  bundle install         # Install all the required gems

  cp config/database.example.yml config/database.yml
  # Edit config/enki.yml and config/database.yml to taste

  # Next step needs libxml2 and libxslt1 and their headers
  # On Debian-based systems: apt-get install libxml2-dev libxslt1-dev
  # On Mac OS X: no action required

  rake db:migrate
  #may be here will display some 'WARNING' message,but it no effect with rails's wrok,like
  ***WARNING:*** 'require 'rake/rdoctask'' is deprecated.  Please use 'require 'rdoc/task' (in RDoc 2.4.2+)' instead.

  rake            # Run tests
  rails server    # Start the server
  # Load http://localhost:3000/admin in your browser</code></pre>

Or for bonus points, fork "enki at github":https://github.com/jhjguxin/enki/commits/master and clone that instead.

h2. More info

Enki is a compact, easily extendable base for your blog. It does this by being highly opinionated, for example:

* Public facing views should adhere to standards (XHTML(eXtensible Hypertext Markup Language), Atom)
* /yyyy/mm/dd/post-title is a good URL for your posts
* Live comment preview should be provided by default
* Google does search better than you or I
* You don't need a plugin system when you've got decent source control
* #If you're not using OpenID you're a chump
* Because I'm a chump,so I decide to use devise 
* Hacking code is the easiest way to customize something

h2. How it differs from Mephisto

Mephisto is feature packed and quite customizable. It can however be daunting trying to find your way around the code, which isn’t so good if you’re trying to hack in your own features. Enki strips out a lot of the features that you probably don’t need (multiple authors and liquid templates, for example), and focuses on keeping a tight code base that is easy to comprehend and extend.

h2. How it differs from SimpleLog

Enki embodies much of the philosophy of SimpleLog, but does so in a style that is much more consistent with Rails best practices, making it easier to understand and hack the code.

h2. Compatibility

Uses rails 3. Runs on MySQL or Postgres. Works on heroku.

h2. Contributors, these guys rock

<pre><code>git log | grep Author | sort | uniq</code></pre>

If you want to help out, try tackling an "open issue":https://github.com/jhjguxin/enki/issues. Please include specs for any fixes. Enki is by design feature light. Unless you feel very strongly your feature should be in core, add a link to your fork in the wiki instead.

h2. License

GPL(General Public License) - See LICENSE

Admin design heavily inspired by "Habari":http://www.habariproject.org/en/

h2. QA

Showing the devise edit password screen?
In my rails 3 app using devise, I want to provide a link for users to edit their password.

I have a standard link that points to: /users/password/edit ... Log output below(#all action in PasswordsController )
<pre><code>Started GET "/users/password/edit" for 127.0.0.1 at 2011-08-10 10:11:46 -0700  
  Processing by Devise::PasswordsController#edit as HTML  
  User Load (0.6ms)  SELECT "users".* FROM "users" WHERE "users"."id" = 3 LIMIT 1  
Redirected to http://localhost:3000/  
Completed 302 Found in 309ms </code></pre>
Why is rails redirecting? Why can't I show the edit password page? Thanks
<code>Devise::PasswordsController#edit</code> is for non-authenticated users who wish to change their password using a reset token. This reset token was previously sent to the user in an email (Reset password instructions). If the user is already logged in, this edit password page will always redirect to the after-sign-in path since it shouldn't be accessible to authenticated users.

I suppose what you want is to allow the user to change his password after logging in. You have to use <code>Devise::RegistrationsController#edit</code> for that.

h2. Fix by Francis

<code>Lesstile::CodeRayFormatter</code>in lesstile not match with coderay 1.0.1
install lesstile with plugin
<code>rails plugin install git://github.com/xaviershay/lesstile.git</code>
change lesstile.rb in 'vendor/plugins/lesstile/lib' as bellow:
<pre><code>
    #CodeRay.scan(CGI::unescapeHTML(code), lang).html(:line_numbers => :table).div
    CodeRay.scan(CGI::unescapeHTML(code), lang).div(:line_numbers => :table)
</code></pre>
